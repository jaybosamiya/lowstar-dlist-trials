# Note: Use ox-reveal package in Emacs, and hit "C-c C-e R R" to
#       extract this as a presentation

#+Title: Doubly Linked Lists in Low*
#+Author:
#+Date: Everest All Hands (Cambridge) 2018 Sep 19
#+OPTIONS: num:nil
#+REVEAL_TRANS: fade
#+REVEAL_THEME: simple
#+REVEAL_PLUGINS: (markdown notes)

# Note: Use `#+ATTR_REVEAL: :frag (t)` before any list to make the list show up one at a time
# Note: Use `#+REVEAL: split` to split a slide into two

* Why DLists?
#+ATTR_REVEAL: :frag (t)
+ Interestingly difficult to get /just right/
+ Shows pain points in F* / Low* / Buffer / Lists / Seq
+ Allows for experimentation with different styles of proving, for a (very!) non-trivial data-structure

* Latest Updates
#+ATTR_REVEAL: :frag (t)
+ Working doubly linked list implementation of
  + Inserting elements /anywhere/ into a DLL
  + Removing elements /anywhere/ into a DLL
+ /Anywhere/ means first, or last, or middle
+ Proofs for all of the functions
  + Proves that "if a /valid/ DLL comes in, then a /valid/ dll comes out"
+ Code size: Currently 2.5k lines of implementation + proofs

* Overview of Proof
#+ATTR_REVEAL: :frag (t)
+ Definitions of ~node t~, ~nodelist t~, ~piece t~, ~fragment t~
+ Validity conditions for each of these
  + Ghostly Connections
  + Containment Properties
  + Anti Aliasing Properties
  + Connectivity Properties
+ ~defragmentable~ fragments
#+REVEAL: split
+ ~tot_*_to_*~
+ (Finally!) ~ST~ functions
  #+ATTR_REVEAL: :frag (t)
  + Implement stateful updates ("low level") separate from "higher level" changes
  + The proof comes out of validity maintenance of each of the transformation steps
  + Move from ~dll~ -> ~fragment{defragmentable}~ -> ~fragment~ -> ~fragment{defragmentable}~ -> ~dll~
* Example of Proof
#+BEGIN_SRC F#
let dll_insert_at_head (#t:Type) (d:dll t) (n:gpointer (node t)) :
  StackInline (dll t)
    (requires (fun h0 ->
         (dll_valid h0 d) /\
         (h0 `contains` n) /\
         (node_not_in_dll h0 n d)))
    (ensures (fun h0 y h1 ->
         Mod.modifies (Mod.loc_union
                         (Mod.loc_buffer n)
                         (Mod.loc_buffer d.lhead)) h0 h1 /\
         dll_valid h1 y)) =
  if is_null d.lhead then (
    singleton_dll n
#+END_SRC
...
#+REVEAL: split
...
#+BEGIN_SRC F#
  ) else (
    let h = d.lhead in
    //
    let h0 = ST.get () in
    !<|= n;
    n =|> h;
    let h0' = ST.get () in
    n <|= h;
    let h1 = ST.get () in
    //
    let f = tot_dll_to_fragment h0 d in
    let p = tot_node_to_piece h0 n in
    let f' = append [p] f in
    piece_remains_valid h0 h0' (Mod.loc_buffer n) (hd f);
    piece_remains_valid_b h0' h1 (hd f);
    fragment_append_valid h1 [p] f;
    tot_defragmentable_fragment_to_dll h1 f'
  )
#+END_SRC
* Example of PROOF
#+BEGIN_SRC
let dll_insert_after (#t:Type) (d:dll t) (e:gpointer (node t))
                                         (n:gpointer (node t)) :
  StackInline (dll t)
    (requires (fun h0 ->
         (dll_valid h0 d) /\
         (e `memP` reveal d.nodes) /\
         (h0 `contains` n) /\
         (node_not_in_dll h0 n d)))
    (ensures (fun h0 y h1 ->
         Mod.modifies (Mod.loc_union
                         (Mod.loc_union
                            (Mod.loc_buffer n)
                            (Mod.loc_buffer d.ltail))
                         (Mod.loc_union
                            (Mod.loc_buffer e)
                            (Mod.loc_buffer (e@h0).flink))) h0 h1 /\
         dll_valid h1 y)) =
  let h0 = ST.get () in
  // assert (length (reveal d.nodes) > 0);
  lemma_dll_links_contained h0 d (reveal d.nodes `index_of` e);
  extract_nodelist_contained h0 (reveal d.nodes) (reveal d.nodes `index_of` e);
  let e1 = (!*e).blink in
  let e2 = (!*e).flink in
  if is_null e2 then (
    dll_insert_at_tail d n
#+END_SRC
...
#+REVEAL: split
...
#+BEGIN_SRC F#
  ) else (
    extract_nodelist_fp0 (reveal d.nodes) (reveal d.nodes `index_of` e);
    unsnoc_is_last (reveal d.nodes);
    extract_nodelist_conn h0 (reveal d.nodes) (reveal d.nodes `index_of` e);
    extract_nodelist_fp0 (reveal d.nodes) (reveal d.nodes `index_of` e + 1);
    if is_not_null e1 then (
      extract_nodelist_conn h0 (reveal d.nodes) (reveal d.nodes `index_of` e - 1);
      extract_nodelist_fp0 (reveal d.nodes) (reveal d.nodes `index_of` e - 1)
    ) else ();
    e <|= n;
    // let h' = ST.get () in assert (h' `contains` e2); assert (Mod.loc_disjoint (Mod.loc_buffer n) (Mod.loc_buffer e2));
    n =|> e2;
    let h0' = ST.get () in
    // assert (is_not_null e1 ==> e1 == (reveal d.nodes).[reveal d.nodes `index_of` e - 1]);
    // assert (is_not_null e1 ==> Mod.loc_includes (nodelist_fp0 (reveal d.nodes)) (Mod.loc_buffer e1));
    // assert (is_not_null e1 ==> Mod.loc_disjoint (Mod.loc_buffer n) (Mod.loc_buffer e1));
    // assert (Mod.loc_disjoint (Mod.loc_buffer n) (Mod.loc_buffer e1));
    Mod.modifies_buffer_elim e1 (Mod.loc_buffer n) h0 h0';
    e =|> n;
    let h0'' = ST.get () in
#+END_SRC
...
#+REVEAL: split
...
#+BEGIN_SRC F#
    // assert (h0 `contains` e2);
    // assert (h0' `contains` e2);
    // assert (e2 == (reveal d.nodes).[reveal d.nodes `index_of` e + 1]);
    extract_nodelist_aa_r (reveal d.nodes) (reveal d.nodes `index_of` e);
    lemma_hd_r_split3 (reveal d.nodes) (reveal d.nodes `index_of` e);
    // assert (Mod.loc_includes (nodelist_fp0 (reveal d.nodes)) (nodelist_fp0 (let _,_,z = split3 (reveal d.nodes) (reveal d.nodes `index_of` e) in z)));
    // assert (Mod.loc_includes (nodelist_fp0 (let _,_,z = split3 (reveal d.nodes) (reveal d.nodes `index_of` e) in z)) (Mod.loc_buffer e2));
    // assert (Mod.loc_disjoint (Mod.loc_buffer e2) (Mod.loc_buffer e));
    // assert (Mod.modifies (Mod.loc_buffer e) h0' h0'');
    Mod.modifies_buffer_elim e2 (Mod.loc_buffer e) h0' h0'';
    // assert (h0'' `contains` e2);
    n <|= e2;
    let h1 = ST.get () in
    //
    // assert (e `memP` reveal d.nodes);
    // assert (e2 `memP` reveal d.nodes);
    // assert (e@h0 |> e2 /\ e <| e2@h0);
#+END_SRC
...
#+REVEAL: split
...
#+BEGIN_SRC F#
    let f = tot_dll_to_fragment_split h0 d e e2 in
    // assert (length f = 2);
    let p1, p3 = f.[0], f.[1] in
    // assert ([p1 ; p3] == f);
    let p2 = tot_node_to_piece h0 n in
    let f' = [p1 ; p2 ; p3] in
    // assert (Mod.modifies (Mod.loc_buffer n) h0 h0');
    // assert (piece_valid h0 p1);
    // assert (loc_equiv (dll_fp0 d) (fragment_fp0 f));
    // assert (Mod.loc_disjoint (Mod.loc_buffer n) (dll_fp0 d));
    // assert (Mod.loc_includes (dll_fp0 d) (fragment_fp0 f));
    // assert (Mod.loc_includes (fragment_fp0 f) (piece_fp0 p1));
    Mod.loc_includes_trans (dll_fp0 d) (fragment_fp0 f) (piece_fp0 p1);
    // assert (Mod.loc_includes (dll_fp0 d) (piece_fp0 p1));
    // assert (Mod.loc_disjoint (Mod.loc_buffer n) (piece_fp0 p1));
    piece_remains_valid h0 h0' (Mod.loc_buffer n) p1;
    // assert (piece_valid h0 p3);
#+END_SRC
...
#+REVEAL: split
...
#+BEGIN_SRC F#
    Mod.loc_includes_trans (dll_fp0 d) (fragment_fp0 f) (piece_fp0 p3);
    // assert (Mod.loc_disjoint (Mod.loc_buffer n) (piece_fp0 p3));
    piece_remains_valid h0 h0' (Mod.loc_buffer n) p3;
    piece_remains_valid_f h0' h0'' p1;
    // assert (Mod.loc_disjoint (piece_fp0 p1) (piece_fp0 p3));
    piece_remains_valid h0' h0'' (piece_fp0 p1) p3;
    piece_remains_valid h0'' h1 (piece_fp0 p3) p1;
    piece_remains_valid_b h0'' h1 p3;
    fragment_append_valid h1 [p2] [p3];
    // assert ([p2 ; p3] == append [p2] [p3]);
    fragment_append_valid h1 [p1] [p2 ; p3];
    // assert (f' == append [p1] [p2 ; p3]);
    //
#+END_SRC
...
#+REVEAL: split
...
#+BEGIN_SRC F#
    // assert (fragment_valid h1 f');
    assert (fragment_defragmentable h1 (tl f')); // OBSERVE
    // assert (fragment_defragmentable h1 f');
    // assert (length f' > 0);
    // assert (is_null ((hd f').phead@h1).blink);
    unsnoc_is_last f';
    // assert (last f' == p3);
    // assert (is_null ((last f').ptail@h1).flink);
    let y = tot_defragmentable_fragment_to_dll h1 f' in
    y
  )
#+END_SRC
* Largest Pain Points
#+ATTR_REVEAL: :frag (t)
+ /Lots/ of time wasted on trying to use ~seq~ library
  + Current version uses ~list~ library, but with many "additions"
    + Should probably merge into ~ulib~
+ Proof performance issues
  #+ATTR_REVEAL: :frag (t)
  + Worked with Tahina in quashing a bunch of ~buffer~ performance issues
    + Thanks Tahina!
  + Quirks of normal vs abnormal usage of libraries
  + Hints sometimes taking /much/ longer than without them
    + Yet to dig into this
#+REVEAL: split
+ Weird hint failures
  + Most of them seem to have been quashed. Will discuss some in breakout sessions.
+ Proof feels /very/ "manual"
  + Previous versions of the proofs involved much more "let Z3 handle it", but were /much/ worse wrt performance, and couldn't finish "middle insertion" in Low* setting

* Future Directions
#+ATTR_REVEAL: :frag (t)
+ Add into CI
+ Figure out the "weird" hint failures
+ Figure out the "~StackInline~" issue
+ Clean up remnants of "convenience interfaces"
  + ~gpointers~ -> ~pointers~ etc
+ Move "additional" lemmas etc for ~list~ into ~ulib~
+ Create a "nice interface" for doubly linked lists
  + This will allow addition into ~ulib~
